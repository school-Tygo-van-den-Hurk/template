name: Automerge Dependabot

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  automerge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Check if it's a patch update
        id: check
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          VERSIONS=($(echo "$PR_TITLE" | grep -Eo 'v?[0-9]+(\.[0-9]+){0,2}'))
          if [ "${#VERSIONS[@]}" -ne 2 ]; then
            echo "Invalid PR title: expected exactly two semantic versions" >&2
            exit 1
          fi
          
          VERSION_FROM="${VERSIONS[0]}"
          VERSION_TO="${VERSIONS[1]}"
          
          IFS='.' read -r MAJOR_FROM MINOR_FROM PATCH_FROM <<< "$VERSION_FROM"
          IFS='.' read -r MAJOR_TO MINOR_TO PATCH_TO <<< "$VERSION_TO"
          
          MAJOR_FROM=$(echo $VERSION_FROM | cut -d. -f1)
          MINOR_FROM=$(echo $VERSION_FROM | cut -d. -f2)
          PATCH_FROM=$(echo $VERSION_FROM | cut -d. -f3)
          
          echo "MAJOR_FROM: $MAJOR_FROM, MINOR_FROM: $MINOR_FROM, PATCH_FROM: $PATCH_FROM"
          
          MAJOR_TO=$(echo $VERSION_TO | cut -d. -f1)
          MINOR_TO=$(echo $VERSION_TO | cut -d. -f2)
          PATCH_TO=$(echo $VERSION_TO | cut -d. -f3)
          
          echo "MAJOR_TO: $MAJOR_TO, MINOR_TO: $MINOR_TO, PATCH_TO: $PATCH_TO"
          
          if [ "$MAJOR_FROM" = "$MAJOR_TO" ] && [ "$MINOR_FROM" = "$MINOR_TO" ]; then 
              echo "patch_update=true"
          else 
              echo "patch_update=false"
          fi
      - name: Auto-merge PR
        uses: actions/github-script@0.2.0
        with:
          script: |
            github.pullRequests.createReview({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE'
            })
            github.pullRequests.merge({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              pull_number: context.payload.pull_request.number
            })
          github-token: ${{github.token}}