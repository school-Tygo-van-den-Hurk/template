# configuration file for git-cliff

[changelog]
trim = true # might have to be false to ensure ending on a new line.

header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/#specification),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}
"""

footer = """

That is all, [go back to the top](#changelog).
"""

#// # An array of regex based postprocessors to modify the changelog.
#// postprocessors = [
#//   # Replace the placeholder `<REPO>` with a URL.
#//   { pattern = '<REPO>', replace = "https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}" }, # replace repository URL
#// ]

[bump]
features_always_bump_minor = true
breaking_always_bump_major = true
custom_major_increment_regex = "major"
custom_minor_increment_regex = "minor"
initial_tag = "0.0.0"

[git]

# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true

# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true

# If any unconventional commits are found, an error will be logged and changelog generation fails.
require_conventional = true

# Split commits on newlines, treating each line as an individual commit.
split_commits = false

#// # An array of regex based parsers to modify commit messages prior to further processing.
#// commit_preprocessors = [
#//   # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
#//   { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
#// ]

# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = true

# Exclude commits that are not matched by any commit parser.
filter_commits = false

# Regex to select git tags that represent releases.
tag_pattern = "v[0-9].*"

# Regex to select git tags that do not represent proper releases.
# Takes precedence over `tag_pattern`.
# Changes belonging to these releases will be included in the next release.
skip_tags = "beta|alpha"

# Regex to exclude git tags after applying the tag_pattern.
# ignore_tags = ""

# Order releases topologically instead of chronologically.
topo_order = false

# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"

# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  # feat: a new feature
  { group = "<!-- 00 --> New Features", message = "^feat.*:"},
  # fix: fixed bugs
  { group = "<!-- 01 --> Bug Fixes", message = "^fix.*:" },
  # perf: performance improvements
  { group = "<!-- 02 --> Performance Improvements", message = "perf.*:" },
  # test: adding or updating tests
  { group = "<!-- 03 --> Code Quality", message = "test.*:" },
  # revert: reverts a previous commit
  { group = "<!-- 04 --> Reverts", message = "^reverts.*:", skip = true },
  # docs: added or improved Documentation
  { group = "<!-- 05 --> Documentation", message = "^docs.*:" },
  # chore: maintenance tasks (build tools, CI, etc.)
  { group = "<!-- 06 --> General Maintenance", message = "chore.*:" },
  # refactor: code change that neither fixes a bug nor adds a feature
  { group = "<!-- 07 --> Refactors", message = "refactor.*:", skip = true },
  # deps: sometimes used for dependency changes
  { group = "<!-- 08 --> Dependency Changes", message = "^deps.*:" },
  { group = "<!-- 08 --> Dependency Changes", message = "^chore\\(deps\\):" },
  # ci: CI configuration or script changes
  { group = "<!-- 09 --> Automation", message = "^ci.*:" },
  # style: formatting (whitespace, semicolons, etc.) â€” no code change
  { group = "<!-- 10 --> Stylistic Changes", message = "style.*:", skip = true },
  # build: changes affecting the build system or dependencies
  { group = "<!-- 11 --> Build", message = "build.*:", skip = true },
  # merge: merge commits (should be prevented)
  { group = "<!-- 12 --> Merges", message = "^[M|m]erge", skip = true },
  # Unmentioned
  { group = "<!-- 13 --> Other", message = ".*", default_scope = "other"},
]
